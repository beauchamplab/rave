% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-cache.R
\name{rave-cache}
\alias{rave-cache}
\alias{cache}
\alias{cache.rave_running}
\alias{cache.rave_running_local}
\alias{cache.default}
\alias{cache_input}
\alias{clear_cache}
\title{Cache R Objects with Different levels}
\usage{
cache(
  key,
  val,
  name,
  replace = FALSE,
  global = FALSE,
  persist = FALSE,
  test = FALSE,
  temporary = FALSE,
  ...
)

\method{cache}{rave_running}(
  key,
  val,
  name,
  replace = FALSE,
  global = FALSE,
  persist = FALSE,
  test = FALSE,
  temporary = FALSE,
  ...
)

\method{cache}{rave_running_local}(..., global = TRUE)

\method{cache}{default}(..., global = TRUE)

cache_input(
  inputId,
  val = NULL,
  read_only = TRUE,
  ...,
  session = getDefaultReactiveDomain()
)

clear_cache(levels = 1)
}
\arguments{
\item{key}{any R object, a named list would be the best.}

\item{val}{value to cache, if key exists, then value will not be evaluated nor saved}

\item{name, inputId}{character name of the dataset or input}

\item{replace}{if true, force replace the cached object with current one}

\item{global}{whether to cache the variable in global environment. If true,
then the variable will be accessible from other instances and modules.}

\item{persist}{logical, whether persist on the hard-disk, only used when 
\code{global=FALSE}, the persisted data will be used by each modules}

\item{test, read_only}{whether not to save the value if cache is not found}

\item{temporary}{whether to use temporary map to cache, used internally.}

\item{...}{ignored}

\item{session}{shiny session instance}

\item{levels}{levels when clear the cache}
}
\value{
Cached value, or \code{val}. If cache and \code{val} are both 
missing, then return \code{NULL}.
}
\description{
Cache R Objects with Different levels
}
\examples{

# global can be set to false within RAVE modules
print(cache('a', 1, name = 'data', global = TRUE)) # returns 1
print(cache('a', 2, name = 'data', global = TRUE)) # still returns 1

# clear cache (for global=TRUE)
clear_cache(levels = 1:3)
print(cache('a', 2, name = 'data', global = TRUE)) # Now returns 2

# Not run `Sys.sleep` because a is cached
print(cache('a', 2, name = 'data', global = TRUE))
print(cache('a', {Sys.sleep(10); 1}, name = 'data', global = TRUE))

# get data without key
cache(name = 'data', global = TRUE)

# clear cache that is global-only
clear_cache(levels = 2)

# Test (test=TRUE) if cache exists, if not, return value but no save
cache(name = 'abracadabra', val = 'no cache', global = TRUE, test = TRUE)
cache(name = 'abracadabra', global = TRUE)

# cache module inputs
\dontrun{
# Need to run in package module environment
cache_input('abracadabra', 'no-magic', read_only = TRUE)  
}


}
