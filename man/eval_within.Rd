% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_general.R
\name{eval_within}
\alias{eval_within}
\title{Evaluate function as if it's run within another environment}
\usage{
eval_within(FUN, env = parent.frame(), ..., .args = list(),
  .tidy = F)
}
\arguments{
\item{FUN}{Function to be evaluated}

\item{env}{Environment for evaluation}

\item{..., .args}{Parameters needed within function}

\item{.tidy}{Evaluate with side effect? see example}
}
\description{
Evaluate function as if it's run within another environment
}
\examples{
\dontrun{
# Arbitrary function
f <- function(a){b <- a*a; print(b); b}

# environment for evaluation
env <- new.env()
a = 'This is Invalid.'
env$a = 11  # a*a is only valid within env

# Case 1: evaluate f with no side effect
result <- eval_within(f, env = env, .tidy = T)
cat('Result:', result, '\\nenv$a: ', env$a, '\\nenv$b:', env$b)

# Case 2: evaluate f with no side effect, but different "a"
result <- eval_within(f, env = env, a = 100, .tidy = T)
cat('Result:', result, '\\nenv$a: ', env$a, '\\nenv$b:', env$b)

# Case 3: evaluate f with side effect
result <- eval_within(f, env = env, a = 20, .tidy = F)
cat('Result:', result, '\\nenv$a: ', env$a, '\\nenv$b:', env$b)

}

}
