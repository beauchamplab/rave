% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-ModuleEnvir.R
\name{ModuleEnvir}
\alias{ModuleEnvir}
\title{R6 'RAVE' Module Class}
\description{
contains module data, functions, etc.
}
\examples{
\dontrun{

module <- get_module('ravebuiltins', 'power_explorer')
module
#> Module Name: Power Explorer 
#> Version: 0 
#> Script Path: ... 
#> Author(s):

}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{cache_env}}{cache environment for module}

\item{\code{module_id}}{module ID, unique}

\item{\code{label_name}}{corresponding module name}

\item{\code{script_path}}{compiled module scripts}

\item{\code{script}}{if \code{script_path} not exists, alternative script}

\item{\code{author}}{who wrote the module not often used}

\item{\code{version}}{module version}

\item{\code{packages}}{the packages to be loaded for the module}

\item{\code{rmd_path}}{deprecated}

\item{\code{parent_env}}{parent environment of the module, usually global 
environment or package environment}

\item{\code{from_package}}{whether the module is compiled from another R 
package. This value is required to be true since \code{"rave-0.1.9"}.}

\item{\code{package_name}}{which package does the module belong to?}

\item{\code{sidebar_width}}{input panel width, from 1 to 11}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-info}{\code{ModuleEnvir$info()}}
\item \href{#method-print}{\code{ModuleEnvir$print()}}
\item \href{#method-new}{\code{ModuleEnvir$new()}}
\item \href{#method-get_or_new_exec_env}{\code{ModuleEnvir$get_or_new_exec_env()}}
\item \href{#method-load_script}{\code{ModuleEnvir$load_script()}}
\item \href{#method-render_ui}{\code{ModuleEnvir$render_ui()}}
\item \href{#method-clean}{\code{ModuleEnvir$clean()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-info"></a>}}
\if{latex}{\out{\hypertarget{method-info}{}}}
\subsection{Method \code{info()}}{
print module information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
none
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
print module information and returns memory address
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$new(
  module_id,
  label_name,
  script_path,
  author = NULL,
  version = "0",
  packages = NULL,
  .script_content = NULL,
  rmd_path = NULL,
  parent_env = globalenv()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{module_id, label_name, script_path, author, version}}{see fields}

\item{\code{packages, parent_env, rmd_path}}{see fields}

\item{\code{.script_content}}{internal use}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_or_new_exec_env"></a>}}
\if{latex}{\out{\hypertarget{method-get_or_new_exec_env}{}}}
\subsection{Method \code{get_or_new_exec_env()}}{
get the corresponding \code{\link[rave]{ExecEnvir}} with 
shiny session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$get_or_new_exec_env(
  session = getDefaultReactiveDomain(),
  ...,
  new = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{shiny session; see shiny \code{\link[shiny]{domains}}}

\item{\code{...}}{ignored}

\item{\code{new}}{whether to force creating a new runtime environment if 
previous one already exists}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
an \code{\link[rave]{ExecEnvir}} instance associated with 
current module and given session
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-load_script"></a>}}
\if{latex}{\out{\hypertarget{method-load_script}{}}}
\subsection{Method \code{load_script()}}{
load and compile script into registered 
\code{\link[rave]{ExecEnvir}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$load_script(session = getDefaultReactiveDomain())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{shiny session; see shiny \code{\link[shiny]{domains}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
none
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-render_ui"></a>}}
\if{latex}{\out{\hypertarget{method-render_ui}{}}}
\subsection{Method \code{render_ui()}}{
generate 'HTML' tags
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$render_ui(session = getDefaultReactiveDomain())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{shiny session; see shiny \code{\link[shiny]{domains}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
'HTML' tags
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clean"></a>}}
\if{latex}{\out{\hypertarget{method-clean}{}}}
\subsection{Method \code{clean()}}{
clean the module environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModuleEnvir$clean(session = getDefaultReactiveDomain(), session_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{shiny session; see shiny \code{\link[shiny]{domains}}}

\item{\code{session_id}}{shiny 'RAVE' ID, default is auto-generated}
}
\if{html}{\out{</div>}}
}
}
}
