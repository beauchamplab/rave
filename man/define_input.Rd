% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics-define_input.R
\name{define_input}
\alias{define_input}
\alias{define_input.default}
\alias{define_input.rave_module_debug}
\alias{define_input.rave_running_local}
\alias{define_input.rave_running}
\title{Defines 'RAVE' Module Inputs}
\usage{
define_input(
  definition,
  init_args,
  init_expr,
  keyword = "inputId",
  update_level = 2,
  ...
)

\method{define_input}{default}(
  definition,
  init_args,
  init_expr,
  keyword = "inputId",
  update_level = 2,
  ...
)

\method{define_input}{rave_module_debug}(definition, init_args, init_expr, ...)

\method{define_input}{rave_running_local}(
  definition,
  init_args,
  init_expr,
  keyword = "inputId",
  update_level = 2,
  ...
)

\method{define_input}{rave_running}(
  definition,
  init_args,
  init_expr,
  keyword = "inputId",
  update_level = 2,
  ...
)
}
\arguments{
\item{definition}{R expression to define UI elements without \code{ns()}, 
for example, \code{textInput('varname', 'Label', ...)}}

\item{init_args}{arguments to change once a subject is loaded}

\item{init_expr}{expression to evaluate with subject loaded}

\item{keyword}{what identifies the input element}

\item{update_level}{update action code: see details.}

\item{...}{ignored or passed to other methods.}
}
\value{
See details
}
\description{
Defines 'RAVE' Module Inputs
}
\details{
This function behaves differently in different contexts. By default, 
it returns the result of \code{definition}. When debugging modules (
\code{"rave_module_debug"}), it assigns a variable to the global environment 
with the variable name defined as input ID. In other contexts it parse
the definition and returns a list for 'RAVE' to use internally to compile
the module.

If \code{update_level} is `0` then the input is defined as  manual inputs, 
which will not trigger re-calculate if changed. If `1` is set, then the 
input is a render's input, and only update render functions. If `2` is 
used, then once user change an input, then the whole module is re-calculated.

\code{init_args} must be argument names of the definition. Once subject is 
loaded, \code{init_expr} will be evaluated in a local environment, then 
variables in \code{init_args} will be used to update the input widgets.
}
